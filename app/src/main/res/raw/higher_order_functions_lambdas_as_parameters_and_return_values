This chapter covers
  Function types
  Higher-order functions and their use for structuring code
  Inline functions
  Non-local returns and labels
  Anonymous functions

 -> how to create higher-order functions

 -> why?
  - your own functions that take lambdas as parameters or return them. You’ll see how
   higher-order functions can help simplify your code, remove code duplication, and build
   nice abstractions.
  -  become acquainted with inline functions—a powerful
    Kotlin feature that removes the performance overhead associated with using lambdas and
                                                        enables more flexible control flow within lambdas.

1 - Declaring higher-order functions
    - A higher-order function is any function to which you can pass a lambda or a function reference as a parameter, or a function which returns one, or both.
    For example, the filter standard-library function takes a predicate function as a parameter and is therefore a higher-order function:
    list.filter { x > 0 }
2 - Function types
    val sum = { x: Int, y: Int -> x + y } <- 2 parameters x, y / (Int, Int) -> Int / parameter type and return type
    val action = { println(42) } <- no parameter / () -> Unit
    -> In this case, the compiler infers that both the sum and action variables have function types.

    The Unit return type can be omitted when you declare a regular function, but a function type declaration always requires an explicit return type, so you
    can’t omit Unit in this context

    { x, y -> x + y } <-  omit the types of the parameters x, y in the lambda expression/ Because they’re specified in the function type as part of the
                                                                                          variable declaration, you don’t need to repeat them in the lambda itself

    var canReturnNull: (Int, Int) -> Int? = { null } <- marked as nullable
    var funOrNull: ((Int, Int) -> Int)? = null

       ->  the subtle difference between this example and the previous one
        If you omit the parentheses, you’ll declare a function type with a nullable return type, and not a nullable variable of a function type

3 - Using function types from Java
    - Kotlin functions that use function types can be called easily from Java
        + Java8: lambdas are automatically converted to values of function types
        + In older Java versions: you can pass an instance of an anonymous class implementing the invoke method from the corresponding function interface:
            /* Java */
            new Function1<Integer, Integer>() {
                @Override
                public Integer invoke(Integer number){
                    System.out.println(number);
                    return number + 1;
                }
            });
4 - Default and null values for parameters with function types
    - com.example.ltrach.higherorderfunction.extensions#joinToString()

5 - Returning functions from functions
    - Example, calculating the cost of shipping depending on the selected shipping method
    - You can define a function that chooses the appropriate logic variant and returns it as another function
    - com.example.ltrach.higherorderfunction#getShippingCostCalculator()
        + Declares a function that returns a function
        + Returns lambdas from the function
        + Stores the returned function in a variable
        + Invokes the returned function

6 - Removing duplication through lambdas
    val averageWindowsDuration = log
        .filter { it.os == OS.WINDOWS }
        .map(SiteVisit::duration)
        .average()
    - Now, suppose you need to calculate the same statistics for Mac users. To avoid duplication, you can extract the platform as a parameter.

    fun List<SiteVisit>.averageDurationFor(os: OS) =
        filter { it.os == os }.map(SiteVisit::duration).average()

MORE IMPORTANT

    1. Inline functions: removing the overhead of lambdas
       - lambdas are normally compiled to anonymous classes
       - But that means every time you use a lambda expression, an extra class is created; and if
       the lambda captures some variables, then a new object is created on every invocation.
       This introduces runtime overhead, causing an implementation that uses a lambda to be less efficient than a function that executes the same code directly
       -> If you mark a function with
          the inline keyword, the compiler won’t generate a function call when this function is
          used and instead will replace every call to the function with the actual code implementing
          the function. Let’s explore how that works in detail and look at specific examples.

    2. How inlining works
       - When you declare a function as inline, its body is inlined—in other words, it’s
         substituted directly instead of the function invocation. Let’s look at an example to
         understand the resulting code.

         inline fun <T> synchronized(lock: Lock, action: () -> T): T{
             lock.lock()
             try {
                return action()
             }finally {
                lock.unlock()
             }
         }

         val l = Lock()
         synchronized(l) {
            // ...
         }
       - Because you’ve declared the synchronized function as inline,
       the code generated for every call to it is the same as for a synchronized statement in Java. The following call

           fun foo(l: Lock){

               println("Before sync")

               synchronized(l){
                  println("Action")
               }

               println("After sync")
           }
       3. Restrictions on inline functions
            - Due to the way inlining is performed, not every function that uses lambdas can be inlined.
            - Generally, the parameter can be inlined if it’s called directly or passed as an argument
              to another inline function. Otherwise, the compiler will prohibit the inlining of the
              parameter with an error message that says "Illegal usage of inline-parameter."

            - Example:

                fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {
                    return TransformingSequence(this, transform)
                }
            -> The map function doesn’t call the function passed as the transform parameter directly.
               Instead, it passes this function to the constructor of a class that stores it in a property
               To support that, the lambda passed as the transform argument needs to be compiled into the standard non-inline representation,
               as an anonymous class implementing a function interface.
            ->
                inline fun foo(inlined: () -> Unit, noinline notInlined: () -> Unit) {

                    // If you have a function that takes two or more lambdas as parameters, you may choose
                       to inline only some of them. This makes sense when one of the lambdas is expected to
                       contain a lot of code or is used in a way that doesn’t allow inlining. You can mark the
                       parameters that accept such non-inlineable lambdas with the noinline modifier

                }
        4. Inlining collection operations
            - Let’s consider the performance of Kotlin standard library functions that work on
              collections.
            - Code: com.example.ltrach.higherorderfunction.chapter8higherorderfunction.InliningCollectionOperation.kt
            - In Kotlin, the filter function is declared as inline. It means the bytecode of the
              filter function, together with the bytecode of the lambda passed to it, will be inlined
              where filter is called.
            - As a result, the bytecode generated for the first version(findPeopleByAgeWithLambdaExpresion) that uses
              filter is roughly the same as the bytecode generated for the second version(findPeopleByAgeWithoutLambdaExpresion). You can
              safely use idiomatic operations on collections, and Kotlin’s support for inline functions
              ensures that you don’t need to worry about performance.

        5. Deciding when to declare functions as inline
            - Using the inline keyword can improve performance only with functions that take lambdas as parameters.
            - For regular function calls, the Java virtual machine already provides powerful inlining
              support. It analyzes the execution of your code and inlines calls whenever doing so
              provides the most benefit.
            - This happens automatically and at the machine-code level.
            - In bytecode, the implementation of each function is repeated only once and doesn’t need to be copied every place where the function is called, as with Kotlin’s
            - You save not only on the call, but also on the creation of the extra class for each lambda and an object for the lambda instance.
            - Second, the JVM currently isn’t smart enough to always perform inlining through the call and the lambda. Finally, inlining lets you use features that are impossible
              to make work with regular lambdas, such as non-local returns, which we’ll discuss later.
        6. Using inlined lambdas for resource management
            -
